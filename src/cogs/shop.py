import discord

from src import DefaultEmbed
from src.base_types import Unique
from src.bot import T84
from src.models import User
from src.shop import ShopItems, ShopItem
from src.static import assets


class ConfirmationButton(discord.ui.Button):
    def __init__(self, cart: list, total_cost: int, buyer: User):
        super().__init__()

        self.user = buyer
        self.cost = total_cost
        self.cart: list[ShopItem] = cart

        self.style = discord.ButtonStyle.green
        self.label = "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é"
        self.emoji = "‚úÖ"

    async def callback(self, interaction: discord.Interaction):
        self.view.disable_all_items()
        await interaction.message.edit(view=self.view)

        if self.user.balance < self.cost:
            return await interaction.response.send_message("‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –±–∞–ª–∞–Ω—Å—É –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è.", ephemeral=True)

        await self.user.add_balance(-self.cost)

        for cart_item in self.cart:
            await cart_item.give(self.user)

        await interaction.response.send_message(
            f"‚úÖ –û–ø–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ!\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {self.user.balance} üí∏", ephemeral=True
        )


class Select(discord.ui.Select):
    def __init__(self, shop_items: tuple):
        options = [
            discord.SelectOption(
                emoji=x.value.emoji, label=x.value.label, value=str(x.value.uid)
            ) for x in shop_items
        ]

        super().__init__(
            placeholder="–í–∏–±–µ—Ä—ñ—Ç—å –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è...",
            options=options,
            max_values=len(options)
        )

    async def callback(self, interaction: discord.Interaction):
        user, _ = await User.get_or_create(discord_id=interaction.user.id)

        cart = []
        cart_cost = 0  # sum(tuple(x.cost for x in cart))
        cart_items_formatted = ""

        for item in self.values:
            shop_item: ShopItem = Unique.get_from_id(int(item))
            cart.append(shop_item)
            cart_cost += shop_item.cost
            cart_items_formatted += f'‚Ä¢ **{shop_item.label}** - {shop_item.cost} üí∏\n'

        embed = DefaultEmbed()

        embed.description = f"""
                {cart_items_formatted}
                –°—É–º–∞: **{cart_cost} üí∏**
            """

        if cart_cost > user.balance:
            embed.colour = discord.Colour.red()
            embed.title = "‚ùå –í–∞–º –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –±–∞–ª–∞–Ω—Å—É –¥–ª—è –ø—Ä–∏–¥–±–∞–Ω–Ω—è"

            return await interaction.response.send_message(embed=embed, ephemeral=True)

        await interaction.response.send_message(content='‚úÖ –î–ª—è –ø–æ–¥–∞–ª—å—à–∏—Ö –¥—ñ–π –ø–µ—Ä–µ–π–¥—ñ—Ç—å –≤ –õ–° –¥–æ –±–æ—Ç—É.', ephemeral=True)

        embed.title = "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä–∏–¥–±–∞–Ω–Ω—è"
        embed.colour = discord.Colour.green()

        view = discord.ui.View()
        view.add_item(ConfirmationButton(cart, cart_cost, user))

        await interaction.user.send(
            content="‚ö† –Ø–∫—â–æ –≤–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏, —Ç–æ –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É–π—Ç–µ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.",
            embed=embed, view=view
        )


class Shop(discord.Cog):
    def __init__(self, bot: T84):
        self.bot = bot

    @discord.slash_command(name='shop', description='üè¨ –ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä—É.')
    async def shop(
            self, ctx: discord.ApplicationContext, shop_type: discord.Option(name="category", choices=['roles'])
    ):
        await ctx.defer()

        shop_items = tuple(x for x in ShopItems if x.value.value.code == shop_type)

        embed = DefaultEmbed()
        embed.title = f"üõçÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Å–µ—Ä–≤–µ—Ä—É | {shop_type.upper()}"

        desc = ""

        for item in shop_items:
            desc += f"{f'<@&{item.value.value.payload}>' if shop_type == 'roles' else item.value.name}" \
                    f"\n*`- {item.value.description if item.value.description is not None else '(–ë–µ–∑ –æ–ø–∏—Å—É)'}`*" \
                    f"\n‚Ä¢ {item.value.cost} üí∏\n\n" \

        embed.description = desc
        embed.set_image(url=assets.SHOP_IMAGE)

        view = discord.ui.View()
        select = Select(shop_items)

        view.add_item(select)

        await ctx.respond(embed=embed, view=view)


def setup(bot: T84):
    bot.add_cog(Shop(bot=bot))
