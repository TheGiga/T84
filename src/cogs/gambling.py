import logging
import random

import discord
from discord.ext.commands import cooldown, BucketType

import src.static.assets
from src import T84ApplicationContext, DefaultEmbed
from src.bot import T84
from src.models import User, Bank

choices = ['–∫–æ–ø—ñ–π–∫–∞', '–≤–æ–ª–æ–¥–∏–º–∏—Ä']
images = {
    '–∫–æ–ø—ñ–π–∫–∞': src.static.assets.RESHKA,
    '–≤–æ–ª–æ–¥–∏–º–∏—Ä': src.static.assets.OREL
}


class Gambling(discord.Cog):
    def __init__(self, bot):
        self.bot: T84 = bot

    eco = discord.SlashCommandGroup(name='eco', description='ü§ë –ö–æ–º–∞–Ω–¥–∏ –µ–∫–æ–Ω–æ–º—ñ–∫–∏ —Ç–∞ —ñ–≥–æ—Ä.')

    @discord.slash_command(name='bank', description='üè¶ –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å–∏ –±–∞–Ω–∫—É.')
    async def check_bank(self, ctx: T84ApplicationContext):
        bank = await Bank.get(id=1)

        embed = DefaultEmbed()
        embed.colour = discord.Colour.green()
        embed.title = "üè¶ –ë–∞–Ω–∫"

        embed.description = f'–£ –±–∞–Ω–∫—É –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏—Å—è **{bank.balance}** üí∏ –¥–ª—è –≤—ñ–ª—å–Ω–∏—Ö –≤–∏–ø–ª–∞—Ç.\n\n' \
                            f'*‚Ñπ –£—Å—ñ –ø–æ–¥–∞—Ç–∫–∏ –∑ –ª—é–±–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π –∑ –≤–∞–ª—é—Ç–æ—é —Ç–∞ –ø—Ä–æ–≥—Ä–∞—à—ñ –≤ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏—Ö —ñ–≥—Ä–∞—Ö –ø–æ–ø–æ–≤–Ω—ñ—é—Ç—å ' \
                            f'—Ü–µ–π –±–∞–Ω–∫, —Ç–∞–∫–æ–∂ —Ü—è –≤–∞–ª—é—Ç–∞ –∑–∞–±–µ–∑–ø–µ—á—É—î –≤–∏–ø–ª–∞—Ç—É –≤–∏–≥—Ä–∞—à—É —É –ª—é–±—ñ–π –∑ —ñ–≥–æ—Ä.*'

        await ctx.respond(embed=embed)

    @discord.slash_command(
        name='pay', description='üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥—Ä–æ—à—ñ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É. (–ö–æ–º—ñ—Å—ñ—è 10%)'
    )
    @cooldown(1, 20, BucketType.user)
    async def eco_pay(
            self, ctx: T84ApplicationContext, member: discord.Option(discord.Member), amount: discord.Option(
                int, min_value=10, max_value=100_000
            )
    ):
        await ctx.defer(ephemeral=True)

        if ctx.user.id == member.id:
            return await ctx.respond("ü§® –†–µ–∞–ª—å–Ω–æ? –°–∞–º —Å–æ–±—ñ?", ephemeral=True)

        front_user = ctx.user_instance
        end_user, _ = await User.get_or_create(discord_id=member.id)

        if amount > front_user.balance:
            return await ctx.respond('‚ùå –í–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.', ephemeral=True)

        amount_after_tax = round(amount * 0.90)

        bank = await Bank.get(id=1)
        await bank.add(round(amount * 0.1))

        await front_user.add_balance(-amount)
        await end_user.add_balance(
            amount_after_tax, notify_user=True, additional_message=f'*‚Ñπ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {ctx.user.mention}*'
        )

        await ctx.respond(
            f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ **{amount}** üí∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.mention}. '
            f'||{amount_after_tax} üí∏ –ø—ñ—Å–ª—è –∫–æ–º—ñ—Å—ñ—ó||', ephemeral=True
        )

        await self.bot.send_critical_log(
            f'{ctx.user.mention} `{front_user}` –≤—ñ–¥—ñ—Å–ª–∞–≤ **{amount}** –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.mention} `{end_user}`',
            logging.INFO
        )

    @eco.command(
        name='coinflip',
        description='üÉè –ö–æ—ñ–Ω—Ñ–ª—ñ–ø —ñ–≥—Ä–æ–≤–æ—é –≤–∞–ª—é—Ç–æ—é. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ +99% –≤—ñ–¥ —Å—Ç–∞–≤–∫–∏ (1% —è –≤–∫—Ä–∞–≤)'
    )
    @cooldown(1, 3, BucketType.user)
    async def eco_coinflip(
            self, ctx: T84ApplicationContext,
            amount: discord.Option(int, min_value=100, max_value=100_000),
            pick: discord.Option(str, choices=choices)
    ):
        user = ctx.user_instance

        if amount > user.balance:
            return await ctx.respond(
                f"‚ùå **–í–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!**\n"
                f"*–î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{user.balance}`*",
                ephemeral=True
            )

        bank = await Bank.get(id=1)

        if round(amount * 0.99) > bank.balance:
            return await ctx.respond(
                "‚ùå –£ **üè¶ –ë–∞–Ω–∫—É** –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ —â–æ–± –ø–æ–∫—Ä–∏—Ç–∏ –º–æ–∂–ª–∏–≤–∏–π –≤–∏–≥—Ä–∞—à.\n"
                "- *–í–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å –±–∞–Ω–∫—É –∫–æ–º–∞–Ω–¥–æ—é `/bank`.",
                ephemeral=True
            )

        bot_choice = random.choice(choices)

        embed = DefaultEmbed()

        if bot_choice != pick:
            await user.add_balance(-amount)
            await bank.add(amount)

            embed.title = '–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏, –≤—Å—ñ –≤–∞—à—ñ –≥—Ä–æ—à—ñ —Ç–µ–ø–µ—Ä –º–æ—ó! üòé'
            embed.description = f"**-{amount}** üí∏"
            embed.set_thumbnail(url=images.get(bot_choice))

            await ctx.respond(embed=embed)
            return

        win_amount = round(amount * 0.99)

        await bank.withdraw(win_amount)

        await user.add_balance(win_amount)

        embed.title = '–í–∏ –≤–∏–≥—Ä–∞–ª–∏ üò¢'
        embed.description = f"**+{win_amount}** üí∏"
        embed.set_thumbnail(url=images.get(bot_choice))

        await ctx.respond(embed=embed)


def setup(bot):
    bot.add_cog(Gambling(bot))
