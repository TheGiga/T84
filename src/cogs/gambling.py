import logging
import random

import discord
from discord.ext.commands import cooldown, BucketType

import src.static.assets
from src import T84ApplicationContext, DefaultEmbed
from src.bot import T84
from src.models import User

choices = ['–∫–æ–ø—ñ–π–∫–∞', '–≤–æ–ª–æ–¥–∏–º–∏—Ä']
images = {
    '–∫–æ–ø—ñ–π–∫–∞': src.static.assets.RESHKA,
    '–≤–æ–ª–æ–¥–∏–º–∏—Ä': src.static.assets.OREL
}


class Gambling(discord.Cog):
    def __init__(self, bot):
        self.bot: T84 = bot

    #eco = discord.SlashCommandGroup(name='eco', description='ü§ë –ö–æ–º–∞–Ω–¥–∏ –µ–∫–æ–Ω–æ–º—ñ–∫–∏ —Ç–∞ —ñ–≥–æ—Ä.')

    @discord.slash_command(
        name='pay', description='üí≥ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥—Ä–æ—à—ñ —ñ–Ω—à–æ–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.'
    )
    @cooldown(1, 10, BucketType.user)
    async def eco_pay(
            self, ctx: T84ApplicationContext, member: discord.Option(discord.Member), amount: discord.Option(
                int, min_value=1, max_value=100_000
            )
    ):
        await ctx.defer(ephemeral=True)

        if ctx.user.id == member.id:
            return await ctx.respond("ü§® –†–µ–∞–ª—å–Ω–æ? –°–∞–º —Å–æ–±—ñ?", ephemeral=True)

        front_user = ctx.user_instance
        end_user, _ = await User.get_or_create(discord_id=member.id)

        if amount > front_user.balance:
            return await ctx.respond('‚ùå –í–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤.', ephemeral=True)

        await front_user.add_balance(-amount)
        await end_user.add_balance(
            amount, notify_user=True, additional_message=f'*‚Ñπ –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {ctx.user.mention}*'
        )

        await ctx.respond(
            f'–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–ª–∏ **{amount}** üí∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.mention}. ', ephemeral=True
        )

        await self.bot.send_critical_log(
            f'{ctx.user.mention} `{front_user}` –≤—ñ–¥—ñ—Å–ª–∞–≤ **{amount}** –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {member.mention} `{end_user}`',
            logging.INFO
        )

    # implement Player 2 Player coinflip system, instead of Player 2 Bot
    #@eco.command(
    #    name='coinflip',
    #    description='üÉè –ö–æ—ñ–Ω—Ñ–ª—ñ–ø —ñ–≥—Ä–æ–≤–æ—é –≤–∞–ª—é—Ç–æ—é. –ü—Ä–∏ –≤–∏–≥—Ä–∞—à—ñ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ +100% –≤—ñ–¥ —Å—Ç–∞–≤–∫–∏.'
    #)
    #@cooldown(1, 3, BucketType.user)
    async def eco_coinflip(
            self, ctx: T84ApplicationContext,
            amount: discord.Option(int, min_value=100, max_value=100_000),
            pick: discord.Option(str, choices=choices)
    ):
        user = ctx.user_instance

        if amount > user.balance:
            return await ctx.respond(
                f"‚ùå **–í–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!**\n"
                f"*–î–æ—Å—Ç—É–ø–Ω–∏–π –±–∞–ª–∞–Ω—Å: `{user.balance}`*",
                ephemeral=True
            )

        bot_choice = random.choice(choices)

        embed = DefaultEmbed()

        if bot_choice != pick:
            embed.title = '–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏, –≤—Å—ñ –≤–∞—à—ñ –≥—Ä–æ—à—ñ —Ç–µ–ø–µ—Ä –º–æ—ó! üòé'
            embed.description = f"**-{amount}** üí∏"
            embed.set_thumbnail(url=images.get(bot_choice))

            await ctx.respond(embed=embed)
            return

        await user.add_balance(amount)

        embed.title = '–í–∏ –≤–∏–≥—Ä–∞–ª–∏ üò¢'
        embed.description = f"**+{amount}** üí∏"
        embed.set_thumbnail(url=images.get(bot_choice))

        await ctx.respond(embed=embed)


def setup(bot):
    bot.add_cog(Gambling(bot))
